name: Build

on:
  push:
    branches:
      - master
      - develop
      - release-*
      - sandbox-*
  pull_request:
    branches:
      - master
      - develop
      - release-*
      - sandbox-*

jobs:
  build:
    name: ${{ matrix.os }}, Node.js v${{ matrix.node }}

    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04', 'macos-14', 'windows-2019']
        node: ['20.11.1']

    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # To fetch all history for all branches and tags. (Will be required for caching with lerna: https://github.com/markuplint/markuplint/pull/111)

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org'

      - name: Use Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get versions
        run: |
          echo "node --version"
          node --version
          echo "npm --version"
          npm --version
          echo "git --version"
          git --version
          echo "python --version"
          python --version
          echo "pwd"
          pwd

      - name: Read version and commit sha
        shell: bash
        run: |
          echo "HASH=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          echo "APP_VERSION=$(node -p -e "require('./electron-app/package.json').version")" >> $GITHUB_ENV
          echo "APP_NAME=$(node -p -e "require('./electron-app/package.json').name")" >> $GITHUB_ENV
          
      - name: Set artifact name
        shell: bash
        run: |
          echo "ARTIFACT_NAME_WIN=$(echo "$APP_NAME-$APP_VERSION-$HASH.exe")" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_LINUX=$(echo "$APP_NAME-$APP_VERSION-$HASH.deb")" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_MAC=$(echo "$APP_NAME-$APP_VERSION-$HASH.dmg")" >> $GITHUB_ENV

      - name: Build and package
        shell: bash
        run: |
          yarn --skip-integrity-check --network-timeout 100000
          
          # make sure it builds for browser
          # yarn build:browser
          
          # make sure it builds for electron
          yarn build:dev
          yarn download:plugins

      - name: Make Linux Installer
        if: matrix.tests != 'skip' && runner.os == 'Linux'
        shell: bash
        run: |
          # make sure it can create installer
          yarn package:applications
          ls -als ./electron-app/dist/*
        env:
          NODE_OPTIONS: --max_old_space_size=4096      

      - uses: actions/upload-artifact@v4
        if: matrix.tests != 'skip' && runner.os == 'Linux'
        name: Upload Linux installer
        with:
          name: ${{ env.ARTIFACT_NAME_LINUX }}
          path: ./electron-app/dist/CheckingTool*.deb


      - name: Make Mac Installer
        if: matrix.tests != 'skip' && runner.os == 'macOS'
        shell: bash
        run: |
          # make sure it can create installer
          yarn package:applications
          ls -als ./electron-app/dist/*
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - uses: actions/upload-artifact@v4
        if: matrix.tests != 'skip' && runner.os == 'macOS'
        name: Upload Mac installer
        with:
          name: ${{ env.ARTIFACT_NAME_MAC }}
          path: ./electron-app/dist/CheckingTool*.dmg


      - name: Make Windows Installer
        if: matrix.tests != 'skip' && runner.os == 'Windows'
        shell: bash
        run: |
          # make sure it can create installer
          yarn package:applications
          ls -als ./electron-app/dist/*
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - uses: actions/upload-artifact@v4
        if: matrix.tests != 'skip' && runner.os == 'Windows'
        name: Upload Windows installer
        with:
          name: ${{ env.ARTIFACT_NAME_WIN }}
          path: .\electron-app\dist\CheckingTool*.exe
